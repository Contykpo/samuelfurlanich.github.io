@inject IJSRuntime js
@inject IStringLocalizer<Resource> Localizer

<nav class="navbar" id="navbar">
    <div class="navbar-title">
        <h5 style="padding-top: 0.6rem;">
            @if (isMobile)
            {
                <a href="#home">
                    <img src="icon-192.png" alt="GitHub" class="social-icon" />
                </a>
            }
            else
            {
                <a href="#home" class="navbar-logo">Samuel Furlanich</a>
            }
        </h5>

        <a href="https://github.com/Contykpo">
            @if (icons is not null)
            {
                <img src="@icons.GitHubAlternative" alt="GitHub" class="social-icon" />
            }
        </a>

        <a href="https://www.linkedin.com/in/samuel-furlanich-7b7838227/">
            @if (icons is not null)
            {
                <img src="@icons.LinkedInAlternative" alt="LinkedIn" class="social-icon" />
            }
        </a>
    </div>

    <div class="navbar-links">
        <a href="#about">@Localizer["about"]</a>
        <a href="#portfolio">@Localizer["projects"]</a>
        <a href="#contactinfo">@Localizer["contact"]</a>
        <div class="top-row px-4">
            <CultureSelector Http=@Http />
        </div>
    </div>

    <button class="hamburger" @onclick="ToggleMenu">
        <!-- Hamburger Icon -->
        &#9776;
    </button>

</nav>

<div class="side-panel" style="transform: @(isMenuOpen ? "translateX(0)" : "translateX(100%)")">
    <div class="panel-content">
        <div class="vertical-links">
            <a href="#about" @onclick="CloseMenu">@Localizer["about"]</a>
            <a href="#portfolio" @onclick="CloseMenu">@Localizer["projects"]</a>
            <a href="#contactinfo" @onclick="CloseMenu">@Localizer["contact"]</a>
        </div>

        <div class="horizontal-buttons">
            <CultureSelector Http=@Http />
        </div>
    </div>
</div>


@code
{
    [Parameter, EditorRequired]
    public required HttpClient Http { get; set; }

    [Parameter, EditorRequired]
    public required BrowserService BrowserService { get; set; }

    public BrowserDimensions Dimensions { get; set; }

    private SocialIcons? icons;

    private bool isMenuOpen = false;
    private bool isMobile = false;


    protected override async Task OnInitializedAsync()
    {
        Dimensions = await BrowserService.GetDimensions();
        
        isMobile = Dimensions.Width <= 768;
        
        // await BrowserService.RegisterResizeListener();
        // BrowserService.DimensionsChanged += UpdateDimensions;

        icons = await Http.GetFromJsonAsync<SocialIcons>("data/socialicons.json");
    }

    private void ToggleMenu() => isMenuOpen = !isMenuOpen;

    private void CloseMenu() => isMenuOpen = false;

    private void UpdateDimensions(BrowserDimensions newDimensions)
    {
        Dimensions = newDimensions;

        isMobile = Dimensions.Width <= 768;

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed.
        BrowserService.DimensionsChanged -= UpdateDimensions;
    }
}
